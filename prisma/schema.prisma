// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model is no longer used, but keeping it here as per your file
model RescueGroupsAnimal {
  id            Int      @id
  attributes    Json
  relationships Json
  includedData  Json?
  status        String?
  animalType    String?
  name          String?
  city          String?
  state         String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orgId         String?
  organization  RescueGroupsOrg? @relation(fields: [orgId], references: [id])

  @@index([animalType, status])
}

// Model is no longer used
model RescueGroupsOrg {
  id      String @id
  data    Json
  animals RescueGroupsAnimal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          Int         @id @default(autoincrement())
  uuid        String      @unique
  createdAt   DateTime    @default(now()) @map("created_at")
  seenVideos  SeenVideo[]
  seenAnimals SeenAnimal[]

  @@map("users")
}

model SeenVideo {
  userId   Int      @map("user_id")
  animalId Int      @map("animal_id")
  seenAt   DateTime @default(now()) @map("seen_at")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, animalId])
  @@map("seen_videos")
}

model SeenAnimal {
  id        Int      @id @default(autoincrement())
  userId    Int
  animalId  Int
  createdAt DateTime @default(now())

  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // --- THIS LINE IS THE FIX ---
  animal AnimalWithVideo   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@unique([userId, animalId])
  @@index([userId])
}

model AnimalWithVideo {
  id               Int           @id
  name             String
  url              String
  type             String
  age              String
  gender           String
  size             String
  status           String
  likeCount        Int           @default(0)
  breeds           Json
  colors           Json
  photos           Json
  videos           Json
  contact          Json
  attributes       Json          @default("{}")
  environment      Json          @default("{}")
  city             String
  state            String
  latitude         Float?
  longitude        Float?
  createdAt        DateTime      @default(now())
  lastSeenAt       DateTime      @updatedAt
  organizationId   String?
  organization     Organization? @relation(fields: [organizationId], references: [id])
  
  // ADD THIS BACK-RELATION
  seenByUsers      SeenAnimal[]

  @@index([city, state, type])
}

model Organization {
  id        String            @id
  name      String
  email     String?
  phone     String?
  address   Json?
  url       String
  animals   AnimalWithVideo[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model WaitlistEntry {
  id        Int      @id @default(autoincrement())
  email     String   @unique // Ensures no duplicate emails
  createdAt DateTime @default(now())

  @@map("waitlist_entries")
}