// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnimalWithVideo {
  id        Int      @id
  name      String
  url       String
  type      String
  age       String
  gender    String
  size      String
  status    String
  likeCount Int      @default(0)
  
  // Store complex objects as JSON
  breeds      Json
  colors      Json
  photos      Json
  videos      Json
  contact     Json
  attributes  Json     @default("{}")
  environment Json     @default("{}")

  // Location and Timestamps
  city       String
  state      String
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  lastSeenAt DateTime @updatedAt

  // --- NEW RELATIONSHIP FIELDS ---
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([city, state, type])
}

// --- NEW MODEL FOR ORGANIZATIONS ---
model Organization {
  id      String   @id // The ID from Petfinder (e.g., "CA123")
  name    String
  email   String?
  phone   String?
  address Json?    // Store the address object as JSON
  url     String
  
  // This creates the other side of the relationship to AnimalWithVideo
  animals AnimalWithVideo[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// --- Your existing User and SeenVideo models ---
model User {
  id         Int         @id @default(autoincrement())
  uuid       String      @unique
  createdAt  DateTime    @default(now()) @map("created_at")
  seenVideos SeenVideo[]

  @@map("users")
}

model SeenVideo {
  userId   Int      @map("user_id")
  animalId Int      @map("animal_id")
  seenAt   DateTime @default(now()) @map("seen_at")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, animalId])
  @@map("seen_videos")
}